package hu.bme.mit.mobilegen.iostestgenerator;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Collections;

import org.eclipse.bpmn2.util.Bpmn2ResourceFactoryImpl;
import org.eclipse.core.resources.*;
import org.eclipse.core.runtime.*;
import org.eclipse.emf.ecore.*;
import org.eclipse.emf.ecore.resource.Resource;









// from xml tutorial
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;

public class BpmnModelProcesser {
	
	void processModel(IPath filePath) {
		System.out.println("IPath = " + filePath);
		
		IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
		IResource resource = root.findMember(filePath);
		if (resource != null) {
		    URI location = resource.getLocationURI();
		    System.out.println("URI = " + location.toString());
		    
		    try {
				File file = new File(FileLocator.resolve(URIUtil.toURL(location)).toURI());
				
				DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
				DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
				Document doc = dBuilder.parse(file);
				
				doc.getDocumentElement().normalize();
				
				System.out.println("Root element: " + doc.getDocumentElement().getNodeName());
				
				// bpmn2:process
				NodeList processList = doc.getElementsByTagName("bpmn2:process");
				
				for (int temp = 0; temp < processList.getLength(); temp++) {
					Node process = processList.item(temp);
					System.out.println("\nProcess Node: " + process.getNodeName());
					
					NodeList processNodes = process.getChildNodes();
					
					for (int i = 0; i < processNodes.getLength(); i++) {
						Node processNode = processNodes.item(i);
						
						if (processNode.getNodeName().startsWith("bpmn2")) {
							System.out.println("\n-- " + processNode.getNodeName() + " = " + processNode.getNodeValue());
														
							NamedNodeMap processNodeAttributes = processNode.getAttributes();
							if (processNodeAttributes != null) {
								for (int ii = 0; ii < processNodeAttributes.getLength(); ii++) {
									Node processNodeAttribute = processNodeAttributes.item(ii);
									
									System.out.println("---- " + processNodeAttribute.getNodeName() + " = " + processNodeAttribute.getNodeValue());
								}
							}
							
							NodeList processNodeChilds = processNode.getChildNodes();
							if (processNodeChilds != null) {
								for (int ii = 0; ii < processNodeChilds.getLength(); ii++) {
									Node processNodeChild = processNodeChilds.item(ii);						
									
									if (processNodeChild.getNodeName().startsWith("bpmn2")) {
										System.out.println("---- " + processNodeChild.getNodeName() + " = " + processNodeChild.getTextContent());
									}
								}
							}
						}
					}
				}
				
			} catch (MalformedURLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (URISyntaxException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ParserConfigurationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (SAXException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
	}
}
