package hu.bme.mit.mobilegen.iostestgenerator;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.Collections;

import org.eclipse.bpmn2.util.Bpmn2ResourceFactoryImpl;
import org.eclipse.core.resources.*;
import org.eclipse.core.runtime.*;
import org.eclipse.emf.ecore.*;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.IFileSystemAccess;



// from xml tutorial
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;


import org.eclipse.emf.ecore.*;


public class BpmnModelProcesser {
	
	private IProgressMonitor monitor;
	
	public BpmnModelProcesser() {
		monitor = new IProgressMonitor() {
			
			@Override
			public void worked(int work) {
				// TODO Auto-generated method stub
			}
			
			@Override
			public void subTask(String name) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void setTaskName(String name) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void setCanceled(boolean value) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public boolean isCanceled() {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			public void internalWorked(double work) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void done() {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void beginTask(String name, int totalWork) {
				// TODO Auto-generated method stub
				
			}
		};
	}
	
	public void processModel(IPath filePath) {
		System.out.println("IPath = " + filePath);
		
		IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
		IResource resource = root.findMember(filePath);
		if (resource != null) {
		    URI location = resource.getLocationURI();
		    System.out.println("URI = " + location.toString());
		    
		    try {
				File file = new File(FileLocator.resolve(URIUtil.toURL(location)).toURI());
				
				DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
				DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
				Document doc = dBuilder.parse(file);
				
				doc.getDocumentElement().normalize();
								
				// Find bpmn2:process element
				NodeList processList = doc.getElementsByTagName("bpmn2:process");
				Node process = processList.item(0);
				NodeList processNodes = process.getChildNodes();
				
				// (!!!) Parse BPMN model!
				ParsedBPMNModel parsedBPMNModel = parseBPMN(processNodes);
				
				// write to console
				//parsedBPMNModel.writeToConsole();
				
				ArrayList<ArrayList<String>> tests = parsedBPMNModel.generateTests();
				
				for (int i = 0; i < tests.size(); i++) {
					ArrayList<String> test = tests.get(i);
					System.out.println("Test #" + i);
					for (int j = 0; j < test.size(); j++) {
						System.out.println("   Step#" + j + " - " + test.get(j));
					}
				}
				
				String[] filePathSegments = filePath.segments();
				String projectName = filePathSegments[0];
				String sourceFileName = filePathSegments[2];
				String testFileName = sourceFileName.substring(0, sourceFileName.length()-5);
				
				HelloXtend codeGenerator = new HelloXtend();
				
				String contentOfTestfile = "";
				contentOfTestfile = contentOfTestfile.concat(codeGenerator.testFileBegin(testFileName, projectName).toString());
				contentOfTestfile = contentOfTestfile.concat(codeGenerator.newLine().toString());
				contentOfTestfile = contentOfTestfile.concat(codeGenerator.beforeAll().toString());
				contentOfTestfile = contentOfTestfile.concat(codeGenerator.newLine().toString());
				contentOfTestfile = contentOfTestfile.concat(codeGenerator.afterAll().toString());
				contentOfTestfile = contentOfTestfile.concat(codeGenerator.newLine().toString());
				
				// generate all test code
				for (int i = 0; i < tests.size(); i++) {
					String contentOfTestMethod = "";
					String methodName = "" + i;
					contentOfTestMethod = contentOfTestMethod.concat(codeGenerator.testMethodBegin(methodName).toString());
					
					ArrayList<String> test = tests.get(i);
					for (int j = 0; j < test.size(); j++) {
						String contentOfTestRow = "";
						
						if (test.get(j).startsWith("TestStep___")) {
							
							String[] testParts = test.get(j).split("/");
							
							String KIFActionParameter = testParts[1];
							String AccessibilityLabelParameter = testParts[2];
							
							if (KIFActionParameter.matches("tapViewWithAccessibilityLabel")) {
								contentOfTestRow = contentOfTestRow.concat("	[tester tapViewWithAccessibilityLabel:@\""+AccessibilityLabelParameter+"\"];");
								
							} else if (KIFActionParameter.matches("enterTextintoViewWithAccessibilityLabel")) {								
								String enterText = AccessibilityLabelParameter.split(",")[0];
								String accLabel  = AccessibilityLabelParameter.split(",")[1];
								
								contentOfTestRow = contentOfTestRow.concat("	[tester enterText:@\""+enterText+"\" intoViewWithAccessibilityLabel:@\""+accLabel+"\"];");
								
							} else if (KIFActionParameter.matches("swipeViewWithAccessibilityLabelinDirection")) {
								String accLabel = AccessibilityLabelParameter.split(",")[0];
								String swipeDir = AccessibilityLabelParameter.split(",")[1];
								
								contentOfTestRow = contentOfTestRow.concat("	[tester swipeViewWithAccessibilityLabel:@\""+accLabel+"\" inDirection:"+swipeDir+"];");
								
							} else {
								contentOfTestRow = contentOfTestRow.concat("	// Test step");
								contentOfTestRow = contentOfTestRow.concat(codeGenerator.newLine().toString());
								contentOfTestRow = contentOfTestRow.concat("	//INVALID KIFAction!!!");
							}
							
							contentOfTestRow = contentOfTestRow.concat(codeGenerator.newLine().toString());
														
						} else if (test.get(j).startsWith("ExpectedResult___")) {
							
							String[] testParts = test.get(j).split("/");
							
							String KIFActionParameter = testParts[1];
							String AccessibilityLabelParameter = testParts[2];
							
							if (KIFActionParameter.matches("waitForViewWithAccessibilityLabel")) {
								contentOfTestRow = contentOfTestRow.concat(codeGenerator.newLine().toString());
								contentOfTestRow = contentOfTestRow.concat("	// Expected result");
								contentOfTestRow = contentOfTestRow.concat(codeGenerator.newLine().toString());
								contentOfTestRow = contentOfTestRow.concat("	[tester waitForViewWithAccessibilityLabel:@\""+AccessibilityLabelParameter+"\"];");
							} else if (KIFActionParameter.matches("waitForAbsenceOfViewWithAccessibilityLabel")) {
								contentOfTestRow = contentOfTestRow.concat(codeGenerator.newLine().toString());
								contentOfTestRow = contentOfTestRow.concat("	// Expected result");
								contentOfTestRow = contentOfTestRow.concat(codeGenerator.newLine().toString());
								contentOfTestRow = contentOfTestRow.concat("	[tester waitForAbsenceOfViewWithAccessibilityLabel:@\""+AccessibilityLabelParameter+"\"];");
							} else {
								contentOfTestRow = contentOfTestRow.concat(codeGenerator.newLine().toString());
								contentOfTestRow = contentOfTestRow.concat("	// Expected result");
								contentOfTestRow = contentOfTestRow.concat(codeGenerator.newLine().toString());
								contentOfTestRow = contentOfTestRow.concat("	//INVALID KIFAction!!!");
							}
							
							contentOfTestRow = contentOfTestRow.concat(codeGenerator.newLine().toString());
							contentOfTestRow = contentOfTestRow.concat(codeGenerator.newLine().toString());
						}

						contentOfTestMethod = contentOfTestMethod.concat(contentOfTestRow);
					}
					contentOfTestMethod = contentOfTestMethod.concat(codeGenerator.testMethodEnd().toString());
					contentOfTestMethod = contentOfTestMethod.concat(codeGenerator.newLine().toString());

					contentOfTestfile = contentOfTestfile.concat(contentOfTestMethod);
				}
				
				contentOfTestfile = contentOfTestfile.concat(codeGenerator.testFileEnd().toString());
								
				// generate test file
				IFile generatedFile = this.addFileToProject(testFileName + ".m", projectName, "src-gen", contentOfTestfile);
				
				// get Xcode test folder path
				String xcodeTestFolder = "";
				IProject project = root.getProject(projectName);
				IFile configFile = project.getFile(new Path("ITGConfig.txt"));
				System.out.println(configFile.getName());
				InputStream inputStream = configFile.getContents();
				BufferedReader in = new BufferedReader(new InputStreamReader(inputStream));
				
				String inputLine; 
				
			    while ((inputLine = in.readLine()) != null) {
			        String[] inputLineParts = inputLine.split("=");
			        if (inputLineParts.length == 2) {
			        	if (inputLineParts[0].matches("Xcode_Test_Project_Folder")) {
			        		xcodeTestFolder = inputLineParts[1];
			        	}
			        }
			    }
			    
			    // copy files to Xcode test folder
				System.out.println(xcodeTestFolder);
								
				xcodeTestFolder = xcodeTestFolder.concat(generatedFile.getName());
				File genFile = new File(xcodeTestFolder);
				
				IPath generatedFileLocation = generatedFile.getLocation();
				
				// copy file content
				FileChannel src = new FileInputStream(generatedFileLocation.toString()).getChannel();
				FileChannel dest = new FileOutputStream(genFile.getAbsolutePath()).getChannel();
				dest.transferFrom(src, 0, src.size());
				
				// create copied file
				genFile.createNewFile();
				
			} catch (MalformedURLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (URISyntaxException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ParserConfigurationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (SAXException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (CoreException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
	private IFile addFileToProject(String fileName, String projectName, String folderName, String content) {
		IWorkspaceRoot root = ResourcesPlugin.getWorkspace().getRoot();
		IProject project = root.getProject(projectName);
		IFolder srcGenFolder = project.getFolder(folderName);
		
		final IFile testFile2 = srcGenFolder.getFile(new Path(fileName));
		try {
			InputStream stream = new ByteArrayInputStream(content.getBytes());
			
			if (testFile2.exists()) {
				testFile2.setContents(stream, true, true, monitor);
			} else {
				testFile2.create(stream, true, monitor);
			}
			stream.close();
		} catch (IOException e) {
			
		} catch (CoreException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return testFile2;
	}
	
	private ParsedBPMNModel parseBPMN(NodeList processNodes) {
		ParsedBPMNModel parsedBPMNModel = new ParsedBPMNModel();
		
		for (int i = 0; i < processNodes.getLength(); i++) {
			Node processNode = processNodes.item(i);
			
			if (processNode.getNodeName().startsWith("bpmn2")) {
				ParsedBPMNNode parsedBPMNNode = null;
				
				// startEvent
				if (processNode.getNodeName().matches("bpmn2:startEvent")) {
					parsedBPMNNode = new ParsedBPMNNodeStartEvent(processNode.getNodeName(), processNode.getNodeValue());
				}
				// endEvent
				else if (processNode.getNodeName().matches("bpmn2:endEvent")) {
					parsedBPMNNode = new ParsedBPMNNodeEndEvent(processNode.getNodeName(), processNode.getNodeValue());
				}
				// sequenceFlow
				else if (processNode.getNodeName().matches("bpmn2:sequenceFlow")) {
					parsedBPMNNode = new ParsedBPMNNodeSequenceFlow(processNode.getNodeName(), processNode.getNodeValue());
				}
				// task - MOST IMPORTANT !!!
				else if (processNode.getNodeName().matches("bpmn2:task")) {
					String type = processNode.getAttributes().getNamedItem("mm:type").getNodeValue();
					
					parsedBPMNNode = new ParsedBPMNNodeTask(processNode.getNodeName(), processNode.getNodeValue());
					((ParsedBPMNNodeTask) parsedBPMNNode).setType(type);					
					
				}
				// inclusiveGateway
				else if (processNode.getNodeName().matches("bpmn2:inclusiveGateway")) {
					parsedBPMNNode = new ParsedBPMNNodeInclusiveGateway(processNode.getNodeName(), processNode.getNodeValue());
				}
				// exclusiveGateway
				else if (processNode.getNodeName().matches("bpmn2:exclusiveGateway")) {
					parsedBPMNNode = new ParsedBPMNNodeExclusiveGateway(processNode.getNodeName(), processNode.getNodeValue());
				}
				// script
				else if (processNode.getNodeName().matches("bpmn2:scriptTask")) {
					parsedBPMNNode = new ParsedBPMNNodeScriptTask(processNode.getNodeName(), processNode.getNodeValue());
				}
				// can't use user another BPMN element
				else {
					// TODO: validation error
					System.out.println("ERROR: can't use this BPMN element - " + processNode.getNodeName());
				}
				
				NamedNodeMap nodeAttributes = processNode.getAttributes();
				int attributeCount = 0;
				if (nodeAttributes != null) {
					attributeCount = nodeAttributes.getLength();
				}
				
				NodeList nodeChilds = processNode.getChildNodes();
				int childCount = 0;
				if (nodeChilds != null) {
					childCount = nodeChilds.getLength();
				}
				
				// -------------
				// ATTRIBUTES
				// -------------
				for (int ii = 0; (ii < attributeCount) && (parsedBPMNNode != null); ii++) {
					Node nodeAttribute = nodeAttributes.item(ii);
					
					// "id" is unique value for Node
					if (nodeAttribute.getNodeName().matches("id")) {
						parsedBPMNNode.setId(nodeAttribute.getNodeValue());
					}
					
					// startEvent
					if (processNode.getNodeName().matches("bpmn2:startEvent")) {
						ParsedBPMNNodeStartEvent startEvent = (ParsedBPMNNodeStartEvent) parsedBPMNNode;
						
						if (nodeAttribute.getNodeName().matches("id")) {
							
						} else {
							// no more parameters
							System.out.println("ERROR: not handled attribute for startEvent - " + nodeAttribute.getNodeName());
						}
					}
					// endEvent
					else if (processNode.getNodeName().matches("bpmn2:endEvent")) {
						ParsedBPMNNodeEndEvent endEvent = (ParsedBPMNNodeEndEvent) parsedBPMNNode;
						
						if (nodeAttribute.getNodeName().matches("id")) {
							
						} else {
							// no more parameters
							System.out.println("ERROR: not handled attribute for endEvent - " + nodeAttribute.getNodeName());
						}
					}
					// sequenceFlow
					else if (processNode.getNodeName().matches("bpmn2:sequenceFlow")) {
						ParsedBPMNNodeSequenceFlow sequenceFlow = (ParsedBPMNNodeSequenceFlow) parsedBPMNNode;
						
						if (nodeAttribute.getNodeName().matches("id")) {
							
						} else if (nodeAttribute.getNodeName().matches("name")) {
							sequenceFlow.setName2(nodeAttribute.getNodeValue());
						} else if (nodeAttribute.getNodeName().matches("sourceRef")) {
							sequenceFlow.setSourceRef(nodeAttribute.getNodeValue());
						} else if (nodeAttribute.getNodeName().matches("targetRef")) {
							sequenceFlow.setTargetRef(nodeAttribute.getNodeValue());
						} else {
							// no more parameters
							System.out.println("ERROR: not handled attribute for sequenceFlow - " + nodeAttribute.getNodeName());
						}
					}
					// task
					else if (processNode.getNodeName().matches("bpmn2:task")) {
						ParsedBPMNNodeTask task = (ParsedBPMNNodeTask) parsedBPMNNode;
						
						if (nodeAttribute.getNodeName().matches("id")) {
							
						} else if (nodeAttribute.getNodeName().matches("mm:type")) {
							// already setted upper
						} else if (nodeAttribute.getNodeName().matches("name")) {
							task.setName2(nodeAttribute.getNodeValue());
						} else {
							// no more parameters
							System.out.println("ERROR: not handled attribute for task - " + nodeAttribute.getNodeName());
						}
					}
					// inclusiveGateway
					else if (processNode.getNodeName().matches("bpmn2:inclusiveGateway")) {
						ParsedBPMNNodeInclusiveGateway inclusiveGateway = (ParsedBPMNNodeInclusiveGateway) parsedBPMNNode;
						
						if (nodeAttribute.getNodeName().matches("id")) {
							
						} else if (nodeAttribute.getNodeName().matches("name")) {
							inclusiveGateway.setName2(nodeAttribute.getNodeValue());
						} else if (nodeAttribute.getNodeName().matches("gatewayDirection")) {
							inclusiveGateway.setGatewayDirection(nodeAttribute.getNodeValue());
						} else {
							// no more parameters
							System.out.println("ERROR: not handled attribute for inclusiveGateway - " + nodeAttribute.getNodeName());
						}
					}
					// exclusiveGateway
					else if (processNode.getNodeName().matches("bpmn2:exclusiveGateway")) {
						ParsedBPMNNodeExclusiveGateway exclusiveGateway = (ParsedBPMNNodeExclusiveGateway) parsedBPMNNode;
						
						if (nodeAttribute.getNodeName().matches("id")) {
							
						} else if (nodeAttribute.getNodeName().matches("name")) {
							exclusiveGateway.setName2(nodeAttribute.getNodeValue());
						} else if (nodeAttribute.getNodeName().matches("gatewayDirection")) {
							exclusiveGateway.setGatewayDirection(nodeAttribute.getNodeValue());
						} else {
							// no more parameters
							System.out.println("ERROR: not handled attribute for exclusiveGateway - " + nodeAttribute.getNodeName());
						}
					}
					// scriptTask
					else if (processNode.getNodeName().matches("bpmn2:scriptTask")) {
						ParsedBPMNNodeScriptTask scriptTask = (ParsedBPMNNodeScriptTask) parsedBPMNNode;
						
						if (nodeAttribute.getNodeName().matches("id")) {
							
						} else if (nodeAttribute.getNodeName().matches("name")) {
							scriptTask.setName2(nodeAttribute.getNodeValue());
						} else {
							// no more parameters
							System.out.println("ERROR: not handled attribute for scriptTask - " + nodeAttribute.getNodeName());
						}
					}
					// can't use user another BPMN element
					else {
						// TODO: validation error
						System.out.println("ERROR: can't use this BPMN element - " + processNode.getNodeName());
					}
				}
				
				// -------------
				// CHILDES
				// -------------
				for (int ii = 0; (ii < childCount) && (parsedBPMNNode != null); ii++) {
					Node nodeChild = nodeChilds.item(ii);						
					
					// startEvent
					if (processNode.getNodeName().matches("bpmn2:startEvent")) {
						ParsedBPMNNodeStartEvent startEvent = (ParsedBPMNNodeStartEvent) parsedBPMNNode;
						
						if (nodeChild.getNodeName().matches("bpmn2:outgoing")) {
							startEvent.setOutgoing(nodeChild.getTextContent());
						} else if (nodeChild.getNodeName().matches("#text")) {
							
						} else {
							// no more childNodes
							System.out.println("ERROR: not handled childNode for startEvent - " + nodeChild.getNodeName());
						}
					}
					// endEvent
					else if (processNode.getNodeName().matches("bpmn2:endEvent")) {
						ParsedBPMNNodeEndEvent endEvent = (ParsedBPMNNodeEndEvent) parsedBPMNNode;
						
						if (nodeChild.getNodeName().matches("bpmn2:incoming")) {
							endEvent.setIncoming(nodeChild.getTextContent());
						} else if (nodeChild.getNodeName().matches("#text")) {
							
						} else {
							// no more childNodes
							System.out.println("ERROR: not handled childNode for endEvent - " + nodeChild.getNodeName());
						}
					}
					// sequenceFlow
					else if (processNode.getNodeName().matches("bpmn2:sequenceFlow")) {
						ParsedBPMNNodeSequenceFlow sequenceFlow = (ParsedBPMNNodeSequenceFlow) parsedBPMNNode;
						
						if (nodeChild.getNodeName().matches("#text")) {
							
						} else {
							// no more childNodes
							System.out.println("ERROR: not handled childNode for sequenceFlow - " + nodeChild.getNodeName());
						}
					}
					// task
					else if (processNode.getNodeName().matches("bpmn2:task")) {
						ParsedBPMNNodeTask task = (ParsedBPMNNodeTask) parsedBPMNNode;
						
						if (nodeChild.getNodeName().matches("bpmn2:incoming")) {
							task.setIncoming(nodeChild.getTextContent());
						} else if (nodeChild.getNodeName().matches("bpmn2:outgoing")) {
							task.setOutgoing(nodeChild.getTextContent());
						} else if (nodeChild.getNodeName().matches("#text")) {
							
						} else if (nodeChild.getNodeName().matches("bpmn2:extensionElements")) {
							
							String KIFValue = null;
							String accessValue = null;
							
							for (int iii = 0; (iii < nodeChild.getChildNodes().getLength()) && (nodeChild.getChildNodes() != null); iii++) {
								Node taskConfig = nodeChild.getChildNodes().item(iii);
								String STR = taskConfig.getNodeName();
								for (int iiii = 0; (iiii < taskConfig.getChildNodes().getLength()) && (taskConfig.getChildNodes() != null); iiii++) {
									Node parameter = taskConfig.getChildNodes().item(iiii);
									
									if (parameter.getNodeName().matches("mm:parameter")) {
										String parameterName = null;
										String parameterValue = null;
										
										for (int iiiii = 0; iiiii < parameter.getAttributes().getLength(); iiiii++) {
											Node val = parameter.getAttributes().item(iiiii);
											
											if (val.getNodeName().matches("name")) {
												parameterName = val.getNodeValue();
											}
											
											if (val.getNodeName().matches("value")) {
												parameterValue = val.getNodeValue();
											}
										}
										
										if (parameterName.matches("AccessibilityLabel")) {
											accessValue = parameterValue;
										} else if (parameterName.matches("KIFAction")) {
											KIFValue = parameterValue;
										}
									}
								}
							}
							
							task.setKIFval(KIFValue);
							task.setAccVal(accessValue);
							
						} else {
							// no more childNodes
							System.out.println("ERROR: not handled childNode for task - " + nodeChild.getNodeName());
						}
					}
					// inclusiveGateway
					else if (processNode.getNodeName().matches("bpmn2:inclusiveGateway")) {
						ParsedBPMNNodeInclusiveGateway inclusiveGateway = (ParsedBPMNNodeInclusiveGateway) parsedBPMNNode;
						
						if (nodeChild.getNodeName().matches("bpmn2:incoming")) {
							inclusiveGateway.setIncoming(nodeChild.getTextContent());
						} else if (nodeChild.getNodeName().matches("bpmn2:outgoing")) {
							inclusiveGateway.addOutgoing(nodeChild.getTextContent());
						} else if (nodeChild.getNodeName().matches("#text")) {
							
						} else {
							// no more childNodes
							System.out.println("ERROR: not handled childNode for inclusiveGateway - " + nodeChild.getNodeName());
						}
					}
					// exclusiveGateway
					else if (processNode.getNodeName().matches("bpmn2:exclusiveGateway")) {
						ParsedBPMNNodeExclusiveGateway exclusiveGateway = (ParsedBPMNNodeExclusiveGateway) parsedBPMNNode;
						
						if (nodeChild.getNodeName().matches("bpmn2:incoming")) {
							exclusiveGateway.addIncoming(nodeChild.getTextContent());
						} else if (nodeChild.getNodeName().matches("bpmn2:outgoing")) {
							exclusiveGateway.setOutgoing(nodeChild.getTextContent());
						} else if (nodeChild.getNodeName().matches("#text")) {
							
						} else {
							// no more childNodes
							System.out.println("ERROR: not handled childNode for exclusiveGateway - " + nodeChild.getNodeName());
						}
					}
					// scriptTask
					else if (processNode.getNodeName().matches("bpmn2:scriptTask")) {
						ParsedBPMNNodeScriptTask task = (ParsedBPMNNodeScriptTask) parsedBPMNNode;
						
						if (nodeChild.getNodeName().matches("bpmn2:incoming")) {
							task.setIncoming(nodeChild.getTextContent());
						} else if (nodeChild.getNodeName().matches("bpmn2:outgoing")) {
							task.setOutgoing(nodeChild.getTextContent());
						} else if (nodeChild.getNodeName().matches("#text")) {
							
						} else {
							// no more childNodes
							System.out.println("ERROR: not handled childNode for scriptTask - " + nodeChild.getNodeName());
						}
					}
					// can't use user another BPMN element
					else {
						// TODO: validation error
						System.out.println("ERROR: can't use this BPMN element - " + processNode.getNodeName());
					}
				}
				
				if (parsedBPMNNode != null) {
					parsedBPMNModel.add(parsedBPMNNode);
				}
			}
		}
		return parsedBPMNModel;
	}
}
